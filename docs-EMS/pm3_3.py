''' Автоматизированная испытательная программа «Испытание МКА на ЭМС Часть 3»
Настоящая часть 3 АИП испытаний МКА на ЭМС определяет поочерёдно при различных сочетаниях работающих ПРД и БА изделия качество информации БА (БСК и ЗД).
Исходное состояние перед началом выполнения ИП:
  - МКА полность собран, установлен на диэлектрическую подставку для БЭК ОМ67.91.22.000 и размещен на поворотном круге в БЭК1, выполнена часть 1 настоящей АИП;
  - собрана схема Э6.2;
  - РМ включено согласно ОМ66.81.00.000 РЭ;
  - внешние ворота БЭК закрыты и прижаты;
  - МКА включен по ИЭ17.2 в следуещем варианте: питание от ИГБФ, БА КИС в ДР.
'''


print('\n', '{#00FF00}АИП ИСПЫТАНИЙ МКА НА ЭМС ЧАСТЬ 3 ВЛИЯНИЕ НА БА', '\n')


'''
Функция «SR_KIS» - функция перевода КИС из ДР в СР. Функция может вызываться при условии ранее выполненной ИЭ17.2. При выполнении данной функции устанавливается максимальная мощность ПРД КПА КИС (-60 дБм). Затем КИС включается в СР и проверяется заданный ее (БАРЛ) комплект. Входные данные: N (целое число) – номер активного БАРЛ, nbarl – строковая переменная, определяющая группу БАРЛ в ДИ (1/2 или 3/4). N может принимать значения 1…4.
'''

def SR_KIS(N, nbarl):
    print('\n', 'ЗАПУСК ФУНКЦИИ ВКЛ КИС В СР', '\n')
    print('\n', 'УСТАНОВКА MAX МОЩНОСТИ ПРД КПА (-60 ДБМ)', '\n')
    Ex.send('КПА', KPA('Мощность-верх'))
    sleep(1.0)

    SOTC(N) #РКN
    print('\n', 'ОТПРАВЛЕНА РК', N, '\n')
    sleep(15.0)
    res = Ex.get('КПА', 'ДИ_КПА', 'прием_КА')
    if res == 1:
        print('\n', 'ЕСТЬ ПРИЕМ С МКА (ПРИЕМ_КА=1)', '\n')
    else: 
        print('\n', '{#FF0000}НЕНОРМА. ОСТАНОВ. НЕТ ПРИЁМА. ДИ = ', res, '\n')
        __BREAK__
    print('\n', 'ФИКСАЦИЯ СВЯЗИ (№38 5 РАЗ)', '\n')
    i = 1
    for i in range(1, 6):
        SOTC(38)
        sleep(1.0) 
    val = Ex.get('ТМИ', '15.00.NRK', + nbarl, 'НЕКАЛИБР ТЕКУЩ')#запрос кода РК
    if val != 38:
        print('\n', '{#FF0000}НЕНОРМА. КОД КВИТ НЕ 38. КОД=', val, '\n')
        __BREAK__
    else: print('\n', 'КОД КВИТАНЦИИ НОРМА', '\n')

    print('\n', 'ПРОВЕРКА СОСТОЯНИЯ ТАЙМЕРА ОТКЛ ПРД (0 – ВЫКЛ)''\n')
    val = Ex.get('ТМИ', '15.00.TOTKLPRD', + nbarl, 'НЕКАЛИБР ТЕКУЩ')
    if val != 0:
        print('\n', '{#FF0000}НЕНОРМА. ТАЙМЕР ОТКЛ ПРД ВКЛ. ДИ=', val, '\n')
        __BREAK__
    else: print('\n', 'ТАЙМЕР ОТКЛ ПРД ВЫКЛ. НОРМА', '\n')

    print('\n', 'ПРОВЕРКА ОБМЕНА ПО МКПД. ДИ = 1 - РАБОТАЕТ', '\n')
    val = Ex.get('ТМИ', '15.00.MKPD', + nbarl, 'НЕКАЛИБР ТЕКУЩ')
    if val != 1:
        print('\n', '{#FF0000}НЕНОРМА. ДИ = ', val, '\n')
        __BREAK__
    else: print('\n', 'НОРМА. ОБМЕН ПО МКПД ЕСТЬ. ДИ = ', val, '\n')

    print('\n', 'ПРОВЕРКА НОМЕРА АКТИВНОГО КОМПЛЕКТА БАРЛ')
    print('NBARL = 0: БАРЛ – 1 … NBARL = 3: БАРЛ – 4', '\n')
    val = Ex.get('ТМИ', '15.00.NBARL', 'НЕКАЛИБР ТЕКУЩ')
    if val != N - 1:
        print('\n', '{#FF0000}НЕНОРМА. ДИ = ', val, '\n')
        __BREAK__
    else: print('НОРМА. АКТИВНЫЙ БАРЛ = ', val, '\n')

    print('\n', 'ПРОВЕРКА УРОВНЯ ПРИНИМАЕМОГО СИГНАЛА (норма 90-210)', '\n')
    val = Ex.get('ТМИ', '15.00.UPRM', + nbarl, 'КАЛИБР ТЕКУЩ')
    if 90 < val <210:
        print('НОРМА. УРОВЕНЬ ПРИНИМАЕМОГО СИГНАЛА = ', val, '\n')
    else:
        print('\n', '{#FF0000}НЕНОРМА. ОСТАНОВ. ДИ = ', val, '\n')
        __BREAK__

    print('\n', 'ФУНКЦИЯ ВКЛ КИС В СР С БАРЛ', N, 'ВЫПОЛНЕНА. НОРМА', '\n')
    return

'''
Функция «DR_KIS» - функция перевода КИС из СР в ДР. При выполнении данной функции устанавливается максимальная мощность ПРД КПА КИС (-60 дБм). Затем включается ДР и проверяется отсутствие сигнала КИС.
'''

def DR_KIS():
    print('\n', 'ЗАПУСК ФУНКЦИИ ПЕРЕВОДА КИС В ДР', '\n')
    print('\n', 'УСТАНОВКА MAX МОЩНОСТИ ПРД КПА (-60 ДБМ)', '\n')
    Ex.send('КПА', KPA('Мощность-верх'))
    sleep(1.0)

    print('\n', 'ПЕРЕВОД КИС В ДР', '\n')
    SOTC(5)
    sleep(5) #Задержка на 5 с
    res = Ex.get('КПА', 'ДИ_КПА', 'прием_КА')
    if res == 1:
        print('\n', '{#FF0000}ЕСТЬ ПРИЁМ С КА НЕНОРМА ОСТАНОВ', '\n')
        __BREAK__
    else: print('\n', 'НЕТ ПРИЕМА С КА (ПРИЕМ_КА=0) КИС В ДР НОРМА', '\n')

    print('\n', 'ФУНКЦИЯ ПЕРЕВОДА КИС В ДР ВЫПОЛНЕНА. НОРМА', '\n')
    return


'''
Функция «on_PRD_RLX» - функция включения 1 или 2 ПРД РЛЦИ-В. Входные данные: N - (целое число) – номер включаемого комплекта ПРД РЛЦИ-В. N может принимать значения 1 (осн) или 2 (рез). Перед вызовом функции «on_PRD_RLX» КИС необходимо перевести в СР.
'''

def on_PRD_RLX(N):
    print('\n', 'ЗАПУСК ФУНКЦИИ ВКЛЮЧЕНИЯ ПРД РЛЦИ-В', N, '\n')

    NBREAK = 0

    BEKK = ['beKKEA11', 'beKKEA12', 'beKKEA21', 'beKKEA22']
    BEBA1 = ['beBAEA11', 'beBAEA12']
    BEBA2 = ['beBAEA21', 'beBAEA22']

    print('\n', 'ПОДКЛЮЧЕНИЕ К БОРТСЕТИ УМ', '\n')
    UV = 0x4011
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(1.0) 
    UV = 0x4012
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(1.0) 
    for be in BEKK:
        kk = Ex.get('ТМИ', '04.01.' + be, 'НЕКАЛИБР ТЕКУЩ')
        if kk != 1:
            print('\n', '{FF0000}НЕНОРМА', be, ' = ', kk, '\n')
            NBREAK = NBREAK + 1
    if NBREAK == 0:
        print('\n', 'ПИТАНИЕ НА УМ ПОДАНО. НОРМА', '\n')
    else:
        print('\n', '{FF0000}НЕНОРМА ВКЛ УМ. ОСТАНОВ', '\n')
        __BREAK__

    print('\n', 'ПОДКЛЮЧЕНИЕ К БОРТСЕТИ БА', N, '\n')
    UV = 0x4013 + N - 1
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(4.0) 
    N1 = 3 - N
    for be in BEBA1:
        kk = Ex.get('ТМИ', '04.01.' + be, 'НЕКАЛИБР ТЕКУЩ')
        if kk != N1 - 1:
            print('\n', '{FF0000}НЕНОРМА', be, ' = ', kk, '\n')
            NBREAK = NBREAK + 1
    for be in BEBA2:
        kk = Ex.get('ТМИ', '04.01.' + be, 'НЕКАЛИБР ТЕКУЩ')
        if kk != N - 1:
            print('\n', '{FF0000}НЕНОРМА', be, ' = ', kk, '\n')
            NBREAK = NBREAK + 1
    if NBREAK == 0:
        print('\n', 'ПИТАНИЕ НА БА', N+1, 'ПОДАНО. НОРМА', '\n')
    else:
        print('\n', '{FF0000}НЕНОРМА ВКЛ БА. ОСТАНОВ', '\n')
        __BREAK__

    print('\n', 'ВКЛЮЧЕНИЕ ПЧ', N, '\n')
    UV = 0xA000 + N - 1
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    print('\n', 'ЗАДЕРЖКА НА 290 с', '\n')
    sleep(290.0) 

    print('\n', 'ВКЛЮЧЕНИЕ ФИП', N, '\n')
    UV = 0xA003 + N - 1
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(2.0) 

    print('\n', 'ВКЛЮЧЕНИЕ МОД', N, '\n')
    UV = 0xA006 + N - 1
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(7.0)

    print('\n', 'ВКЛЮЧЕНИЕ ТЕСТОВОГО СР УМ', N, '\n')
    UV = 0xA009 + N - 1
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(1.0)

    P1= Ex.get('ТМИ', '10.01.UM1_ATM1_P_OUT', 'КАЛИБР ТЕКУЩ')#Рвых УM1 
    P2 = Ex.get('ТМИ', '10.01.UM2_ATM2_P_OUT', 'КАЛИБР ТЕКУЩ')#Рвых УM2 
    if N == 1:
        if 1.0 < P1 < 2.5 and 0.0 < P2 < 0:
            print('\n', 'ВЫХОДНАЯ МОЩНОСТЬ УМ1 НОРМА', '\n')
        else: 
            print('\n', '{#FF0000}ВЫХОДНАЯ МОЩНОСТЬ УМ НЕНОРМА. ОСТАНОВ', '\n')
            __BREAK__
    else: 
        if 1.0 < P2 < 2.5 and 0.0 < P1 < 0:
            print('\n', 'ВЫХОДНАЯ МОЩНОСТЬ УМ2 НОРМА', '\n')
        else: 
            print('\n', '{#FF0000}ВЫХОДНАЯ МОЩНОСТЬ УМ НЕНОРМА. ОСТАНОВ', '\n')
            __BREAK__

    print('\n', 'ЗАВЕРШЕНИЕ РАБОТЫ ФУНКЦИИ ВКЛ ПРД РЛЦИ-В', N, '\n')
    return


'''
Функция «off_RLX» - функция выключения РЛЦИ-В. Перед вызовом функции «off_RLX» КИС необходимо перевести в СР.
'''

def off_RLX():
    print('\n', 'ЗАПУСК ФУНКЦИИ ВЫКЛЮЧЕНИЯ РЛЦИ-В', '\n')

    NBREAK = 0

    BERLX = ['beKKEA11', 'beKKEA12', 'beKKEA21', 'beKKEA22', 'beBAEA11', 'beBAEA12', 'beBAEA21', 'beBAEA22']

    print('\n', 'ВЫКЛЮЧЕНИЕ СР УМ', '\n')
    UV = 0xA00B
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(1.0)



    print('\n', 'ВЫКЛЮЧЕНИЕ ПЧ', '\n')
    UV = 0xA002
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(1.0) 

    print('\n', 'ВЫКЛЮЧЕНИЕ ФИП', '\n')
    UV = 0xA005
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(1.0) 

    print('\n', 'ВЫКЛЮЧЕНИЕ МОД', '\n')
    UV = 0xA008
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(1.0)

    print('\n', 'ОТКЛЮЧЕНИЕ ОТ БОРТСЕТИ УМ', '\n')
    UV = 0x40D9
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(1.0) 
    UV = 0x40DA
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(1.0) 

    print('\n', 'ОТКЛЮЧЕНИЕ ОТ БОРТСЕТИ БА', '\n')
    UV = 0x40DB
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(1.0) 
    UV = 0x40DC
    HUV = hex(UV)
    print(UV)
    print(HUV)
    SCPICMD(UV)
    sleep(1.0) 
    for be in BERLX:
        kk = Ex.get('ТМИ', '04.01.' + be, 'НЕКАЛИБР ТЕКУЩ')
        if kk != 0:
            print('\n', '{FF0000}НЕНОРМА', be, ' = ', kk, '\n')
            NBREAK = NBREAK + 1
    if NBREAK == 0:
        print('\n', 'ПИТАНИЕ С РЛЦИ-В СНЯТО. НОРМА', '\n')
    else:
        print('\n', '{FF0000}НЕНОРМА ВЫКЛ РЛЦИ-В. ОСТАНОВ', '\n')
        __BREAK__

    P1= Ex.get('ТМИ', '10.01.UM1_ATM1_P_OUT', 'КАЛИБР ТЕКУЩ')#Рвых УM1 
    P2 = Ex.get('ТМИ', '10.01.UM2_ATM2_P_OUT', 'КАЛИБР ТЕКУЩ')#Рвых УM2 
    if 0.0 < P1 < 2.5 and 0.3 < P2 < 0.3:
        print('\n', 'ВЫХОДНАЯ МОЩНОСТЬ УМ = 0. НОРМА', '\n')
    else: 
        print('\n', '{#FF0000}ОСТАНОВ. НЕНОРМА. Pвых1,2 = ', P1, P2, '\n')
        __BREAK__

    print('\n', 'ЗАВЕРШЕНИЕ РАБОТЫ ФУНКЦИИ ВЫКЛ РЛЦИ-В', '\n')
    return


'''
Функция «on_RLP(N)» - функция включения 1 или 2 комплекта канала Р БСК. Входные данные: N - (целое число) – номер включаемого комплекта. N может принимать значения 1 (осн) или 2 (рез). Перед вызовом функции «on_RLP» КИС необходимо перевести в СР.
'''

def on_RLP(N):
    print('\n', 'ЗАПУСК ФУНКЦИИ ВКЛЮЧЕНИЯ Р/Л Р', '\n')

#Включить комплект N канала Р с контролем по ДИ

    print('\n', 'ЗАВЕРШЕНИЕ РАБОТЫ ФУНКЦИИ ВКЛ Р/Л Р', '\n')
    return


'''
Функция «off_RLP()» - функция выключения канала Р БСК. Перед вызовом функции «off_RLP» КИС необходимо перевести в СР.
'''

def off_RLP(N):
    print('\n', 'ЗАПУСК ФУНКЦИИ ВЫКЛЮЧЕНИЯ Р/Л Р', '\n')

#Выключить канал Р с контролем по ДИ

    print('\n', 'ЗАВЕРШЕНИЕ РАБОТЫ ФУНКЦИИ ВЫКЛ Р/Л Р', '\n')
    return


'''
Функция «on_RLК(N)» - функция включения 1 или 2 комплекта канала Ku БСК. Входные данные: N - (целое число) – номер включаемого комплекта. N может принимать значения 1 (осн) или 2 (рез). Перед вызовом функции «on_RLК» КИС необходимо перевести в СР.
'''

def on_RLK(N):
    print('\n', 'ЗАПУСК ФУНКЦИИ ВКЛЮЧЕНИЯ Р/Л Ku', '\n')

#Включить комплект N Ku с контролем по ДИ

    print('\n', 'ЗАВЕРШЕНИЕ РАБОТЫ ФУНКЦИИ ВКЛ Р/Л Ku', '\n')
    return


'''
Функция «off_RLК()» - функция выключения канала Ku БСК. Перед вызовом функции «off_RLК» КИС необходимо перевести в СР.
'''

def off_RLK(N):
    print('\n', 'ЗАПУСК ФУНКЦИИ ВЫКЛЮЧЕНИЯ Р/Л Ku', '\n')

#Включить Ku с контролем по ДИ

    print('\n', 'ЗАВЕРШЕНИЕ РАБОТЫ ФУНКЦИИ ВЫКЛ Р/Л Ku', '\n')
    return


print('\n', 'ОЦЕНКА ВЛИЯНИЯ НА БспА1 и ЗД1', '\n')

print('\n', 'ВКЛЮЧЕНИЕ РПД1 КИС', '\n')
SR_KIS(1, '1\2')

'''
Включить БспА и ЗД (у Юрьева есть модуль вкл ЗД). Оценить по качество полученной информации и сравнить его с информацией, полученной в ходе ЭРТИ при работен РЭС МКА по закрытым каналам. Выключить БспА и ЗД
'''

DR_KIS()
print('\n', 'ВКЛЮЧЕНИЕ РПД2 КИС', '\n')
SR_KIS(2, '1\2')

'''
Включить БспА и ЗД (у Юрьева есть модуль вкл ЗД). Оценить по качество полученной информации и сравнить его с информацией, полученной в ходе ЭРТИ при работен РЭС МКА по закрытым каналам. Выключить БспА и ЗД
'''

DR_KIS()
print('\n', 'ВКЛЮЧЕНИЕ РПД3 КИС', '\n')
SR_KIS(3, '3\4')

'''
Включить БспА и ЗД (у Юрьева есть модуль вкл ЗД). Оценить по качество полученной информации и сравнить его с информацией, полученной в ходе ЭРТИ при работен РЭС МКА по закрытым каналам. Выключить БспА и ЗД
'''

DR_KIS()
print('\n', 'ВКЛЮЧЕНИЕ РПД4 КИС', '\n')
SR_KIS(4, '3\4')

'''
Включить БспА и ЗД (у Юрьева есть модуль вкл ЗД). Оценить по качество полученной информации и сравнить его с информацией, полученной в ходе ЭРТИ при работен РЭС МКА по закрытым каналам. Выключить БспА и ЗД
'''

DR_KIS()

print('\n', 'ВКЛЮЧЕНИЕ РПД1 РЛЦИ-В', '\n')
SR_KIS(1, '1\2')
on_PRD_RLX(1)

'''
Включить БспА и ЗД (у Юрьева есть модуль вкл ЗД). Оценить по качество полученной информации и сравнить его с информацией, полученной в ходе ЭРТИ при работен РЭС МКА по закрытым каналам. Выключить БспА и ЗД
'''

off_RLX()
DR_KIS()
print('\n', 'ВКЛЮЧЕНИЕ РПД2 РЛЦИ-В', '\n')
SR_KIS(1, '1\2')
on_PRD_RLX(2)

'''
Включить БспА и ЗД (у Юрьева есть модуль вкл ЗД). Оценить по качество полученной информации и сравнить его с информацией, полученной в ходе ЭРТИ при работен РЭС МКА по закрытым каналам. Выключить БспА и ЗД
'''

off_RLX()
DR_KIS()

print('\n', 'ВКЛЮЧЕНИЕ 1 КОМПЛЕКТА КАНАЛА Р', '\n')
SR_KIS(1, '1\2')
on_RLP(1)

'''
Включить БспА и ЗД (у Юрьева есть модуль вкл ЗД). Оценить по качество полученной информации и сравнить его с информацией, полученной в ходе ЭРТИ при работен РЭС МКА по закрытым каналам. Выключить БспА и ЗД
'''

off_RLP()
DR_KIS()
print('\n', 'ВКЛЮЧЕНИЕ 2 КОМПЛЕКТА КАНАЛА Р', '\n')
SR_KIS(1, '1\2')
on_RLP(2)

'''
Включить БспА и ЗД (у Юрьева есть модуль вкл ЗД). Оценить по качество полученной информации и сравнить его с информацией, полученной в ходе ЭРТИ при работен РЭС МКА по закрытым каналам. Выключить БспА и ЗД
'''

off_RLP()
DR_KIS()

print('\n', 'ВКЛЮЧЕНИЕ 1 КОМПЛЕКТА КАНАЛА Кu', '\n')
SR_KIS(1, '1\2')
on_RLK(1)

'''
Включить БспА и ЗД (у Юрьева есть модуль вкл ЗД). Оценить по качество полученной информации и сравнить его с информацией, полученной в ходе ЭРТИ при работен РЭС МКА по закрытым каналам. Выключить БспА и ЗД
'''

off_RLK()
DR_KIS()
print('\n', 'ВКЛЮЧЕНИЕ 2 КОМПЛЕКТА КАНАЛА Кu', '\n')
SR_KIS(1, '1\2')
on_RLK(2)

'''
Включить БспА и ЗД (у Юрьева есть модуль вкл ЗД). Оценить по качество полученной информации и сравнить его с информацией, полученной в ходе ЭРТИ при работен РЭС МКА по закрытым каналам. Выключить БспА и ЗД
'''

off_RLK()
DR_KIS()

print('\n', 'ВКЛЮЧЕНИЕ ДУК КДУ', '\n')
SR_KIS(1, '1\2')

#Включить ДУК КДУ


'''
Включить БспА и ЗД (у Юрьева есть модуль вкл ЗД). Оценить по качество полученной информации и сравнить его с информацией, полученной в ходе ЭРТИ при работен РЭС МКА по закрытым каналам. Выключить БспА и ЗД
'''

#Выключить ДУК КДУ

DR_KIS()

print('\n', 'ВКЛЮЧЕНИЕ ВСЕХ ПРД1 и ДУК КДУ', '\n')
SR_KIS(1, '1\2')
on_PRD_RLX(1)
on_RLP(1)
on_RLK(1)

#Включить ДУК КДУ

'''
Включить БспА и ЗД (у Юрьева есть модуль вкл ЗД). Оценить по качество полученной информации и сравнить его с информацией, полученной в ходе ЭРТИ при работен РЭС МКА по закрытым каналам. Выключить БспА и ЗД
'''

#Выключить ДУК КДУ

off_RLK()
off_RLP()
off_RLX()
DR_KIS()

print('\n', 'ВКЛЮЧЕНИЕ ВСЕХ ПРД2 и ДУК КДУ', '\n')
SR_KIS(1, '1\2')
on_PRD_RLX(2)
on_RLP(2)
on_RLK(2)

#Включить ДУК КДУ

'''
Включить БспА и ЗД (у Юрьева есть модуль вкл ЗД). Оценить по качество полученной информации и сравнить его с информацией, полученной в ходе ЭРТИ при работен РЭС МКА по закрытым каналам. Выключить БспА и ЗД
'''

#Выключить ДУК КДУ

off_RLK()
off_RLP()
off_RLX()
DR_KIS()


#Повторить испытания для БспА2 и ЗД2,3,4 (


print('\n', '{#00FF00}АИП ЭМС БА МКА ВЫПОЛНЕНА ПОЛНОСТЬЮ')
